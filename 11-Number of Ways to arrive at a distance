class Solution {
public:
    int countPaths(int n, vector<vector<int>>& edges) {
        vector<pair<int,int>>adj[n];      

        for(auto i:edges){

            int a=i[0];

            int b=i[1];

            int c=i[2];           

            adj[a].push_back({b,c});

            adj[b].push_back({a,c});
        }       

        vector<int>ways(n,0);

        vector<int>dis(n,INT_MAX);

        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;// {NODE,DIST}

        pq.push({0,0});

        dis[0]=0;

        ways[0]=1;

        while(!pq.empty()){

            int a=pq.top().first;

            int b=pq.top().second;
            pq.pop();

                for(auto i:adj[a])
                {
                int nbrnode=i.first;

                int y=i.second;               

                int nd=y+b;

                if(dis[nbrnode]>nd){

                    dis[nbrnode]=nd;

                    pq.push({nbrnode,dis[nbrnode]});

                    ways[nbrnode]=1;

                }

                else if(dis[nbrnode]==nd){

                    ways[nbrnode]+=ways[a];

                }

            }

        }

        return ways[n-1];

    }
};
