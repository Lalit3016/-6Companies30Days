class Solution {
    int distance(vector<int> p1,vector<int> p2)
    {
        return( (p2[0]-p1[0])*(p2[0]-p1[0])+ (p2[1]-p1[1])*(p2[1]-p1[1]));
    }
public:
    bool validSquare(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4) {
        // int x=p1[0]+p2[0]+p3[0]+p4[0];
        // int y=p1[1]+p2[1]+p3[1]+p4[1];
        // if(x==y)
        // return true;
        // return false; brute force
vector<vector<int>> p({p1,p2,p3,p4});
        set<int> st;

        for(int i=0;i<4;i++)
        {
            for(int j=i+1;j<4;j++)
            {
                int point=distance(p[i],p[j]);

                if(point!=0)
                {
                    st.insert(point);
                }
                else{
                    return false;
                }
            }
        }
        return st.size()==2;
    }
};
