class Solution {
public:
    int maxPoints(vector<vector<int>>& points) {
        // int m=points.size();
        // if (m<2)
        // {
        //     return m;
        // }
        // int maxi=0;
        // for(int i=0;i<m;i++)
        // {
        //     for(int j=i+1;j<m;j++)
        //     {
        //         int x1=points[i][0],y1=points[i][1],x2=points[j][0],y2=points[j][1];
        //         int count=2;
        //         for(int k=j+1;k<m;k++)
        //         {
        //             int x3=points[k][0],y3=points[k][1];
        //             if ((x2-x1)*(y3-y1)==(x3-x1)*(y2-y1))
        //             {
        //                 count ++;
        //             }
        //         }
        //         maxi=max(count,maxi);
        //     }
        // }/// O(N)^3
        // return maxi;


    
        int n=points.size();
        if(n<=2) return n;
        int ans = 0;

        for(auto it1 : points){
            unordered_map<double,int> mp;
            
            double x1 = it1[0], y1 = it1[1];
            for(auto it2 : points){   
                if(it2 == it1) continue;
                double x2 = it2[0], y2 = it2[1];
                double slope;
                if(x2-x1 == 0){
                    slope = INT_MAX; // slope is infinity for vertical line
                }else{
                    slope = (y2-y1)/(x2-x1);   
                }
                mp[slope]++;
                ans = max(ans,mp[slope]);
            }
        }
        return ans+1; //including point i
    }
};
   
