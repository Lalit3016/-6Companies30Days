class Solution {
   vector<int> solveTab(int n,vector<int > &nums)
    {
       int maxi=1, num=-1;
        vector<int>temp;
        vector<int>dp(n, 1);
        for(int i=1; i<n; i++){
            for(int j=0; j<i; j++){
                if((nums[i]%nums[j]==0) && dp[i]<dp[j]+1)
                {
                    dp[i]=dp[j]+1;
                    if(maxi<dp[i]){
                        maxi=dp[i];
                    }
                }
            }
        }
        for(int i=n-1; i>=0; i--){
            if(maxi==dp[i] && (num==-1 || (num%nums[i]==0)) ){
                temp.push_back(nums[i]);
                maxi--;
                num=nums[i];
            }
        }
        return temp;
    
       
    }
        

public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
       sort(nums.begin(),nums.end());
        
      return solveTab(nums.size(),nums);
       
    }
};
